name: Generate Artifacts
on:
    release:
        types: [published]

jobs:
    build-artifacts:
        permissions:
            contents: write
            actions: read
            pull-requests: read

        name: Build
        strategy:
            fail-fast: false
            matrix:
                include:
                    - platform: "macos-latest" # for Arm-based Macs (M1 and above).
                      args: "--target aarch64-apple-darwin"
                      yaak_arch: "arm64"
                    - platform: "macos-latest" # for Intel-based Macs.
                      args: "--target x86_64-apple-darwin"
                      yaak_arch: "x64"
                    - platform: "ubuntu-22.04"
                      args: ""
                      yaak_arch: "x64"
                    - platform: "windows-latest"
                      args: ""
                      yaak_arch: "x64"
        runs-on: ${{ matrix.platform }}
        timeout-minutes: 40
        steps:
            - name: Checkout yaakapp/app
              uses: actions/checkout@v4

            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: 22

            - name: Setup Bun
              uses: oven-sh/setup-bun@v1
              with:
                  bun-version: latest

            - name: install Rust stable
              uses: dtolnay/rust-toolchain@stable
              with:
                  # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
                  targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

            - uses: actions/cache@v3
              continue-on-error: false
              with:
                  path: |
                      ~/.cargo/bin/
                      ~/.cargo/registry/index/
                      ~/.cargo/registry/cache/
                      ~/.cargo/git/db/
                      src-tauri/target/
                  key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
                  restore-keys: ${{ runner.os }}-cargo-

            - name: install dependencies (ubuntu only)
              if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
              run: |
                  sudo apt-get update
                  sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

            - name: install dependencies (windows only)
              if: matrix.platform == 'windows-latest'
              run: cargo install --force trusted-signing-cli

            - name: Update version in Cargo.toml and tauri.conf.json (Unix)
              if: matrix.platform != 'windows-latest'
              run: |
                  VERSION=${{ github.event.release.tag_name }}
                  VERSION=${VERSION#v}
                  
                  # Update Cargo.toml version
                  sed -i.bak "s/^version = \".*\"/version = \"$VERSION\"/" src-tauri/Cargo.toml
                  
                  # Update tauri.conf.json version
                  sed -i.bak "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" src-tauri/tauri.conf.json
                  
                  # Show the changes
                  echo "Updated Cargo.toml:"
                  grep "^version" src-tauri/Cargo.toml
                  echo "Updated tauri.conf.json:"
                  grep "\"version\"" src-tauri/tauri.conf.json

            - name: Update version in Cargo.toml and tauri.conf.json (Windows)
              if: matrix.platform == 'windows-latest'
              run: |
                  $VERSION = "${{ github.event.release.tag_name }}"
                  $VERSION = $VERSION -replace "^v", ""
                  
                  # Update Cargo.toml version
                  (Get-Content src-tauri/Cargo.toml) -replace '^version = ".*"', "version = `"$VERSION`"" | Set-Content src-tauri/Cargo.toml
                  
                  # Update tauri.conf.json version
                  (Get-Content src-tauri/tauri.conf.json) -replace '"version": ".*"', "`"version`": `"$VERSION`"" | Set-Content src-tauri/tauri.conf.json
                  
                  # Show the changes
                  Write-Host "Updated Cargo.toml:"
                  Select-String -Path src-tauri/Cargo.toml -Pattern "^version"
                  Write-Host "Updated tauri.conf.json:"
                  Select-String -Path src-tauri/tauri.conf.json -Pattern '"version"'
              shell: pwsh

            - name: Install frontend dependencies
              run: |
                  bun install

            - name: CI Build
              run: |
                  bun run build

            - name: Build Tauri app
              uses: tauri-apps/tauri-action@v0
              # if u get Error: Resource not accessible by integration
              # go to repository Settings => Action => General => Workflow permissions => Switch to Read and Write permisions
              env:
                  CI: true
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
                  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
              with:
                  # tauri-action replaces \_\_VERSION\_\_ with the app version
                  tagName: ${{ github.event.release.tag_name }}
                  releaseName: "${{ github.event.release.name }}"
                  releaseBody: |
                      ${{needs.changelog.outputs.changelog}}
                      See the assets to download this version and install.
                  releaseDraft: false
                  prerelease: ${{ github.ref != 'refs/heads/main' && github.ref_type != 'tag' }}
                  args: ${{ matrix.args }}

            - name: Create latest.json for updater
              if: ${{ matrix.platform == 'macos-latest' && matrix.args == '--target aarch64-apple-darwin' }}
              run: |
                  VERSION=${{ github.event.release.tag_name }}
                  VERSION=${VERSION#v}
                  
                  # Wait a bit for the release assets to be available
                  sleep 10
                  
                  # Get the signature from the .sig file
                  SIGNATURE=$(curl -s "https://github.com/${{ github.repository }}/releases/download/${{ github.event.release.tag_name }}/updater_darwin_aarch64.app.tar.gz.sig" || echo "")
                  
                  echo "{
                    \"version\": \"$VERSION\",
                    \"notes\": \"New version $VERSION available\",
                    \"pub_date\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
                    \"platforms\": {
                      \"darwin-aarch64\": {
                        \"signature\": \"$SIGNATURE\",
                        \"url\": \"https://github.com/${{ github.repository }}/releases/download/${{ github.event.release.tag_name }}/updater_darwin_aarch64.app.tar.gz\"
                      }
                    }
                  }" > latest.json
                  
                  # Show the generated latest.json for debugging
                  echo "Generated latest.json:"
                  cat latest.json
                  
                  gh release upload ${{ github.event.release.tag_name }} latest.json --clobber
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
