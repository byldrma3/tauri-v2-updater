name: Publish Release

on:
    push:
        tags:
            - "v*"
        branches: ["*"]
    workflow_dispatch:

# GitHub Releases'a yazmak iÃ§in gerekli
permissions:
    contents: write

env:
    APP_NAME: "Sample Desktop App"

jobs:
    changelog:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Build changelog
              id: build_changelog
              run: |
                  PREV_TAG=$(git tag --list v* | tail -n2 | head -n1)
                  echo "changelog=$(git log $PREV_TAG...${{ github.ref_name }} --pretty=format:"- %s")" >> $GITHUB_OUTPUT
        outputs:
            changelog: ${{ steps.build_changelog.outputs.changelog }}

    release:
        strategy:
            fail-fast: false
            matrix:
                include:
                    - platform: "macos-latest" # Apple Silicon (ARM)
                      args: "--target aarch64-apple-darwin"
                    - platform: "macos-13" # Intel (x86_64) native runner
                      args: "--target x86_64-apple-darwin"
                    - platform: "windows-latest"
                      args: ""
        runs-on: ${{ matrix.platform }}
        needs: [changelog]
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            # Node/Bun
            - name: Install Bun
              uses: oven-sh/setup-bun@v2
              with:
                  bun-version: latest

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "lts/*"

            - name: Cache Bun dependencies
              uses: actions/cache@v4
              with:
                  path: ~/.bun/install/cache
                  key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
                  restore-keys: |
                      ${{ runner.os }}-bun-

            # Rust
            - name: Install Rust stable
              uses: dtolnay/rust-toolchain@stable
              with:
                  targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || (matrix.platform == 'macos-13' && 'x86_64-apple-darwin,aarch64-apple-darwin') || '' }}

            - name: Rust cache
              uses: swatinem/rust-cache@v2
              with:
                  workspaces: "./src-tauri -> target"

            # App deps
            - name: Install frontend dependencies
              run: bun install

            # Branch build (opsiyonel)
            - name: CI Build
              if: ${{ github.ref_type == 'branch' }}
              run: bun run build

            # ---- Tag build'lerinde SÃœRÃœM SENKRONU ----
            - name: Derive app version from tag
              if: ${{ github.ref_type == 'tag' }}
              shell: bash
              run: |
                  VERSION="${GITHUB_REF_NAME#v}"
                  if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
                    echo "Tag format invalid: $GITHUB_REF_NAME. Expected vMAJOR.MINOR.PATCH"
                    exit 1
                  fi
                  echo "APP_VERSION=$VERSION" >> "$GITHUB_ENV"
                  echo "Resolved APP_VERSION=$VERSION"

            - name: Install cargo-edit (for cargo set-version)
              if: ${{ github.ref_type == 'tag' }}
              run: cargo install cargo-edit

            - name: Set Cargo.toml version to tag & cargo update
              if: ${{ github.ref_type == 'tag' }}
              working-directory: src-tauri
              run: |
                  cargo set-version "$APP_VERSION"
                  cargo update
                  echo "Cargo.toml version set to $APP_VERSION"
                  grep -n '^version' Cargo.toml || true

            # (Opsiyonel) tauri.conf.json'da version alanÄ±nÄ± tag ile eÅŸitle
            - name: Sync tauri.conf.json version (optional)
              if: ${{ github.ref_type == 'tag' }}
              shell: bash
              run: |
                  CONF="src-tauri/tauri.conf.json"
                  if [[ -f "$CONF" ]]; then
                    if command -v jq >/dev/null 2>&1; then
                      if jq 'has("version")' "$CONF" | grep -q true; then
                        tmp=$(mktemp)
                        jq --arg v "$APP_VERSION" '.version=$v' "$CONF" > "$tmp" && mv "$tmp" "$CONF"
                        echo "Updated tauri.conf.json version -> $APP_VERSION"
                      else
                        echo "tauri.conf.json has no .version field; skipping."
                      fi
                    else
                      echo "jq not found; skipping tauri.conf.json version sync."
                    fi
                  fi

            # (Opsiyonel) package.json versiyonunu da tag ile eÅŸitle
            - name: Sync package.json version (optional)
              if: ${{ github.ref_type == 'tag' && hashFiles('package.json') != '' }}
              shell: bash
              run: |
                  if command -v jq >/dev/null 2>&1; then
                    tmp=$(mktemp)
                    jq --arg v "$APP_VERSION" '.version=$v' package.json > "$tmp" && mv "$tmp" package.json
                    echo "Updated package.json version -> $APP_VERSION"
                  else
                    echo "jq not found; skipping package.json version sync."
                  fi

            # ---- SIGNING SECRET FORMAT CHECK (fail fast) ----
            - name: Validate TAURI_SIGNING_PRIVATE_KEY (base64 check)
              if: ${{ github.ref_type == 'tag' }}
              shell: bash
              env:
                  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
              run: |
                  bad=$(echo "$TAURI_SIGNING_PRIVATE_KEY" | tr -d 'A-Za-z0-9+/=\n' | wc -c)
                  if [ "$bad" -ne 0 ]; then
                    echo "Secret key contains non-base64 chars. Fix TAURI_SIGNING_PRIVATE_KEY."
                    exit 1
                  fi

            # ---- Tag'de Tauri build + GitHub Release ----
            - name: Build Tauri app
              uses: tauri-apps/tauri-action@v0
              if: ${{ github.ref_type == 'tag' }}
              env:
                  CI: true
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
                  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
              with:
                  tagName: ${{ github.ref_name }}
                  releaseName: "${{ env.APP_NAME }} v__VERSION__"
                  releaseBody: |
                      ${{ needs.changelog.outputs.changelog }}
                      See the assets to download this version and install.
                  releaseDraft: false
                  prerelease: false
                  args: ${{ matrix.args }}

            # ---- ArtefactlarÄ± listele (debug) ----
            - name: List updater artifacts
              if: ${{ github.ref_type == 'tag' }}
              shell: bash
              run: |
                  echo "=== macOS ARM ==="
                  ls -lah src-tauri/target/aarch64-apple-darwin/release/bundle/macos || true
                  echo "=== macOS x64 ==="
                  ls -lah src-tauri/target/x86_64-apple-darwin/release/bundle/macos || true
                  echo "=== Windows NSIS ==="
                  ls -lah src-tauri/target/release/bundle/nsis || true
                  echo "=== Windows MSI ==="
                  ls -lah src-tauri/target/release/bundle/msi || true

            # ---- .sig eksikse imzala (garanti) ----
            - name: Sign updater artifacts if missing
              if: ${{ github.ref_type == 'tag' }}
              shell: bash
              env:
                  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
                  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
              run: |
                  set -euo pipefail
                  # 1) macOS ARM
                  ARM_APP=$(ls src-tauri/target/aarch64-apple-darwin/release/bundle/macos/*.app.tar.gz 2>/dev/null || true)
                  if [[ -n "$ARM_APP" && ! -f "${ARM_APP}.sig" ]]; then
                    echo "Signing (darwin-aarch64): $ARM_APP"
                    bunx tauri signer sign --private-key "$TAURI_SIGNING_PRIVATE_KEY" "$ARM_APP" > "${ARM_APP}.sig"
                  fi
                  # 2) macOS x64
                  X64_APP=$(ls src-tauri/target/x86_64-apple-darwin/release/bundle/macos/*.app.tar.gz 2>/dev/null || true)
                  if [[ -n "$X64_APP" && ! -f "${X64_APP}.sig" ]]; then
                    echo "Signing (darwin-x86_64): $X64_APP"
                    bunx tauri signer sign --private-key "$TAURI_SIGNING_PRIVATE_KEY" "$X64_APP" > "${X64_APP}.sig"
                  fi
                  # 3) Windows NSIS
                  EXE_WIN=$(ls src-tauri/target/release/bundle/nsis/*.exe 2>/dev/null || true)
                  if [[ -n "$EXE_WIN" && ! -f "${EXE_WIN}.sig" ]]; then
                    echo "Signing (windows-x86_64): $EXE_WIN"
                    bunx tauri signer sign --private-key "$TAURI_SIGNING_PRIVATE_KEY" "$EXE_WIN" > "${EXE_WIN}.sig"
                  fi
                  # 4) Windows MSI (varsa)
                  MSI_WIN=$(ls src-tauri/target/release/bundle/msi/*.msi 2>/dev/null || true)
                  if [[ -n "$MSI_WIN" && ! -f "${MSI_WIN}.sig" ]]; then
                    echo "Signing (windows-msi-x86_64): $MSI_WIN"
                    bunx tauri signer sign --private-key "$TAURI_SIGNING_PRIVATE_KEY" "$MSI_WIN" > "${MSI_WIN}.sig"
                  fi

            # ðŸ”½ latest.json Ã¼ret (v2 updater: .app.tar.gz + .sig)
            - name: Create latest.json (from built artifacts)
              if: ${{ github.ref_type == 'tag' }}
              shell: bash
              run: |
                  set -euo pipefail
                  VERSION="${APP_VERSION:-${GITHUB_REF_NAME#v}}"
                  OWNER="${{ github.repository_owner }}"
                  REPO="${{ github.event.repository.name }}"
                  BASE="https://github.com/${OWNER}/${REPO}/releases/download/${GITHUB_REF_NAME}"
                  NOW="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"

                  # macOS ARM
                  APP_ARM=$(ls src-tauri/target/aarch64-apple-darwin/release/bundle/macos/*.app.tar.gz 2>/dev/null || true)
                  SIG_ARM=""
                  [[ -n "${APP_ARM}" && -f "${APP_ARM}.sig" ]] && SIG_ARM="$(cat "${APP_ARM}.sig")"

                  # macOS Intel
                  APP_X64=$(ls src-tauri/target/x86_64-apple-darwin/release/bundle/macos/*.app.tar.gz 2>/dev/null || true)
                  SIG_X64=""
                  [[ -n "${APP_X64}" && -f "${APP_X64}.sig" ]] && SIG_X64="$(cat "${APP_X64}.sig")"

                  # Windows NSIS (.exe)
                  EXE_WIN=$(ls src-tauri/target/release/bundle/nsis/*.exe 2>/dev/null || true)
                  SIG_WIN=""
                  [[ -n "$EXE_WIN" && -f "$EXE_WIN.sig" ]] && SIG_WIN="$(cat "$EXE_WIN.sig")"

                  # Windows MSI (.msi)
                  MSI_WIN=$(ls src-tauri/target/release/bundle/msi/*.msi 2>/dev/null || true)
                  SIG_MSI=""
                  [[ -n "$MSI_WIN" && -f "$MSI_WIN.sig" ]] && SIG_MSI="$(cat "$MSI_WIN.sig")"

                  NOTES="${{ needs.changelog.outputs.changelog }}"
                  NOTES="${NOTES//$'\n'/\\n}"

                  {
                    echo "{"
                    echo "  \"version\": \"${VERSION}\","
                    echo "  \"pub_date\": \"${NOW}\","
                    echo "  \"notes\": \"${NOTES}\","
                    echo "  \"platforms\": {"
                    first=1

                    if [[ -n "$SIG_ARM" ]]; then
                      echo "    \"darwin-aarch64\": { \"url\": \"${BASE}/$(basename "$APP_ARM")\", \"signature\": \"${SIG_ARM}\" }"
                      first=0
                    fi
                    if [[ -n "$SIG_X64" ]]; then
                      [[ $first -eq 0 ]] && echo ","
                      echo "    \"darwin-x86_64\": { \"url\": \"${BASE}/$(basename "$APP_X64")\", \"signature\": \"${SIG_X64}\" }"
                      first=0
                    fi
                    if [[ -n "$SIG_WIN" ]]; then
                      [[ $first -eq 0 ]] && echo ","
                      echo "    \"windows-x86_64\": { \"url\": \"${BASE}/$(basename "$EXE_WIN")\", \"signature\": \"${SIG_WIN}\" }"
                      first=0
                    fi
                    if [[ -n "$SIG_MSI" ]]; then
                      [[ $first -eq 0 ]] && echo ","
                      echo "    \"windows-msi-x86_64\": { \"url\": \"${BASE}/$(basename "$MSI_WIN")\", \"signature\": \"${SIG_MSI}\" }"
                      first=0
                    fi

                    echo "  }"
                    echo "}"
                  } > latest.json

                  echo "Generated latest.json:"
                  cat latest.json

            # ðŸ”¼ latest.json'Ä± aynÄ± release'a yÃ¼kle
            - name: Upload latest.json to release
              if: ${{ github.ref_type == 'tag' }}
              uses: softprops/action-gh-release@v2
              with:
                  files: latest.json
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
